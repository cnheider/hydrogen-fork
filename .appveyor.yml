environment:
  GENERATOR: "MinGW Makefiles"
  ARTIFACT_BRANCH: phil-windows-xp-support-artifacts
  matrix:

    - job_name: 'Windows64'
      job_group: 'Windows'
      MSYS: 'C:\msys64\mingw64'
      MSYS_REPO: 'mingw64/mingw-w64-x86_64'
      BUILD_TYPE: "Release"
      CMAKE_FLAGS: "-DWANT_DEBUG:BOOL=OFF -DWIN64:BOOL=ON"
      appveyor_build_worker_image: Visual Studio 2017
      LIBJACK: libjack64.dll
      QTFOLDER: msvc2015_64
      CHOCO_ARCH:
      PROGRAM_FILES: "Program Files"

    - job_name: 'Windows32'
      job_group: 'Windows'
      MSYS: 'C:\msys64\mingw32'
      MSYS_REPO: 'mingw-w64-i686'
      BUILD_TYPE: "Release"
      CMAKE_FLAGS: "-DWANT_DEBUG:BOOL=OFF -DWIN64:BOOL=OFF"
      appveyor_build_worker_image: Visual Studio 2017
      LIBJACK: libjack.dll
      QTFOLDER: msvc2015
      CHOCO_ARCH:  --x86
      PROGRAM_FILES: "Program Files (x86)"

build:
  verbosity: detailed

matrix:
  exclude:
    - job_name: Windows32
      branches: "master"

for:
  - 
    matrix:
      only:
        - job_group: 'Linux'

    before_build: |-
      echo 'Linux build script'
      sudo apt-get update
      sudo apt-get install -y clang qt5-default qttools5-dev qttools5-dev-tools libqt5xmlpatterns5-dev libarchive-dev libsndfile1-dev libasound2-dev libjack-jackd2-dev libqt5svg5-dev
      sudo apt-get install -y liblo-dev libpulse-dev libportmidi-dev portaudio19-dev libcppunit-dev liblrdf-dev librubberband-dev ladspa-sdk
      sudo rm /usr/local/bin/doxygen

    build_script: |-
      git submodule init && git submodule update

      CPUS=$(nproc)
      echo "Building with $CPUS cpus"
      mkdir build && cd build && cmake -DWANT_LASH=1 -DWANT_LRDF=1 -DWANT_RUBBERBAND=1 .. && make -j $CPUS

    test_script: |-
      TMPDIR=/tmp src/tests/tests --appveyor

  - 
    cache: /Users/appveyor/cache_dir
    matrix:
      only:
        - job_group: 'Mac OS X'

    before_build: |-

      ###############################################################
      # Set up macOS dependencies
      # We use the Appveyor build cache to store the installed
      # prerequisites, since installing and custom-building the
      # needed macOS components in each build takes far longer than
      # the Hydrogen build itself.
      #
      # However, the Homebrew installation is much larger than the
      # size of cache that Appveyor allows (1GB per project, shared
      # between all configurations), so we archive only objects that
      # are new or modified relative to the pre-existing 'clean' VM
      # state, using `treestate.py` to compare.
      #
      # For most build jobs, we just unpack the cached Homebrew on top
      # of the existing Homebrew installation.
      #
      # If the cache is cleaned or out of date, we first record the
      # state of the Homebrew installation, then update it and install
      # prerequisites, and build a new archive of the current Homebrew
      # installation.
      #
      # Currently the necessary changes, compressed with xz, occupy
      # about 170Mb of cache space.
      #

      export MACOSX_DEPLOYMENT_TARGET=10.12
      sudo ln -s /usr/local /opt/local;

      cache_tag=usr_local_1 # this can be modified to rebuild deps

      cdir=$HOME/cache_dir
      cache_tar=$cdir/$cache_tag.tar
      cache=$cache_tar.xz

      CPUS=$(sysctl -n hw.ncpu)

      if [ -d $cdir ] && [ -f $cache ]; then
        echo "=== Unpacking cached Homebrew $cache ==="
        (
          cd /
          tar xf $cache
        )
        echo "done"
      else
        echo "=== Building dependencies ==="
        echo "Couldn't find cache $cache"
        ls -alrt "$cdir"

        echo "Recording /usr/local state"
        python3 ./treestate.py scan /usr/local usrlocal.json

        brew update
        # Build our own versions of these for macOS 10.12 target systems.
        brew install --build-from-source ./macos/HomebrewFormulae/berkeley-db.rb
        brew install --build-from-source ./macos/HomebrewFormulae/libogg.rb
        brew install --build-from-source ./macos/HomebrewFormulae/libvorbis.rb
        brew install --build-from-source ./macos/HomebrewFormulae/libsndfile.rb

        brew install qt5 libarchive jack pulseaudio cppunit ruby

        # The build environment is now ready for use. We can complete
        # the rest of the process of creating the Homebrew archive
        # during the rest of the build, using idle CPU time. To minimise
        # the amount of space needed for the archive, we compress with
        # xz, which adds only about a minute to the non-cached build.
        (
          echo "=== Creating cache tarball $cache ==="
          echo "Check /usr/local for updates"
          python3 ./treestate.py updates usrlocal.json /usr/local       \
              | fgrep -v .git                                           \
                      > updated_list
          echo Need to record $( wc -l updated_list ) updates

          mkdir -p $cdir
          rm -f $cdir/*
          nice tar cf $cache_tar -T updated_list
          echo nice xz -9 -T$CPUS $cache_tar
          nice xz -9 -T$CPUS $cache_tar
          du -h $cdir
        ) 2>&1 | sed 's/^/CACHE: /' &

      fi

      export CMAKE_PREFIX_PATH="$(brew --prefix qt5)";
      export PKG_CONFIG_PATH="$(brew --prefix libarchive)/lib/pkgconfig";

    build_script: |-
      # fix use of register keyword in jack: https://github.com/jackaudio/jack1/issues/84
      sed -i '' 's/, int register,/, int,/g' /opt/local/include/jack/types.h

      git submodule init && git submodule update

      # Do the build
      (
          mkdir build &&                                                        \
              cd build &&                                                       \
              cmake -DWANT_LASH=1 -DWANT_LRDF=1 -DWANT_RUBBERBAND=1 .. &&       \
              make -j $CPUS
      )

      # Build installation DMG
      (
        PATH="$(brew --prefix qt5)/bin:$PATH"
        ../macos/build_dmg.sh -v src/gui/hydrogen.app Hydrogen${PKG_SUFFIX}.dmg

        # deploy dmg only on branch $ARTIFACT_BRANCH
        if [ "$APPVEYOR_REPO_BRANCH" = "$ARTIFACT_BRANCH" ]; then
            appveyor PushArtifact Hydrogen*.dmg -DeploymentName Installer;
        fi
      ) | sed 's/^/DMG: /' &

    test_script: |-
      cd build
      TMPDIR=/tmp src/tests/tests --appveyor || exit 1

      echo "Waiting for installer creation and cache archiving"
      wait
      echo "Done"

  -
    matrix:
      only:
        - job_group: 'Windows'

    before_build:
      cmd: |-

          if not %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH% if %job_name%==Windows32 appveyor exit

          set QTDIR="c:\Qt\5.6.3\%QTFOLDER%"
          set CMAKE_PREFIX_PATH=%QTDIR%
          set PATH=%MSYS%\bin;%PATH%
          set PKG_CONFIG_PATH=%MSYS%\lib\pkgconfig

          echo %QTDIR%

          cmake --version
          g++ --version
          choco install %CHOCO_ARCH% -y jack

          dir "c:\%PROGRAM_FILES%\JACK2"
          dir "c:\%PROGRAM_FILES%\JACK2\lib"

          curl -LO https://github.com/libsndfile/libsndfile/releases/download/1.0.31/libsndfile-1.0.31-win64.zip
          dir
          file libsndfile-1.0.31-win64.zip || cmd /c "exit  /b 0"
          unzip libsndfile-1.0.31-win64.zip || cmd /c "exit  /b 0"
          set LIBSNDPATH="%cd%/libsndfile-1.0.31-win64" || cmd /c "exit  /b 0"
          echo %LIBSNDPATH%
          dir %LIBSNDPATH% || cmd /c "exit  /b 0"

          REM *** Updating packages

          dir "c:\" || cmd /c "exit  /b 0"
          dir "c:\Qt" || cmd /c "exit  /b 0"
          dir "c:\Qt\5.6.3" || cmd /c "exit  /b 0"
          dir "c:\Qt\5.6.3\%QTFOLDER%" || cmd /c "exit  /b 0"
          dir "c:\Qt\5.6.3\%QTFOLDER%\lib" || cmd /c "exit  /b 0"

          C:\msys64\usr\bin\bash -lc "sed -i 's/SigLevel    = Required DatabaseOptional/SigLevel = Never DatabaseNever PackageNever/' /etc/pacman.conf"

          curl -O https://repo.msys2.org/msys/x86_64/msys2-keyring-r21.b39fb11-1-any.pkg.tar.xz || cmd /c "exit  /b 0"
          curl -O https://repo.msys2.org/msys/x86_64/msys2-keyring-r21.b39fb11-1-any.pkg.tar.xz.sig || cmd /c "exit  /b 0"

          C:\msys64\usr\bin\bash -lc "pacman --version"
          C:\msys64\usr\bin\bash -lc "cat /etc/pacman.conf"
          C:\msys64\usr\bin\bash -lc "ls /usr/share/pacman"
          C:\msys64\usr\bin\bash -lc "ls /usr/share/pacman/keyrings"
          C:\msys64\usr\bin\bash -lc "ls /var/lib/pacman/"
          C:\msys64\usr\bin\bash -lc "ls /var/lib/pacman/sync"
          C:\msys64\usr\bin\bash -lc "rm -r /var/lib/pacman/sync"

          C:\msys64\usr\bin\bash -lc "pacman-key --verify /c/projects/hydrogen/msys2-keyring-r21.b39fb11-1-any.pkg.tar.xz.sig"

          rmdir /Q /S c:\msys64\etc\pacman.d\gnupg || cmd /c "exit  /b 0"
          
          C:\msys64\usr\bin\bash -lc "pacman --noconfirm -U /c/projects/hydrogen/msys2-keyring-r21.b39fb11-1-any.pkg.tar.xz"
          
          C:\msys64\usr\bin\bash -lc "pacman-key --init
          C:\msys64\usr\bin\bash -lc "pacman-key --populate msys2" || cmd /c "exit  /b 0"
          dir "c:\msys64\etc\pacman.d" || cmd /c "exit  /b 0"
          
          c:\msys64\usr\bin\pacman --noconfirm --disable-download-timeout -Scc || cmd /c "exit  /b 0"
          C:\msys64\usr\bin\bash -lc "pacman --noconfirm -U 'http://repo.msys2.org/msys/x86_64/libzstd-1.4.5-2-x86_64.pkg.tar.xz'"
          C:\msys64\usr\bin\bash -lc "pacman --noconfirm -U 'http://repo.msys2.org/msys/x86_64/zstd-1.4.5-2-x86_64.pkg.tar.xz'"
          C:\msys64\usr\bin\bash -lc "pacman --noconfirm -U 'http://repo.msys2.org/msys/x86_64/pacman-5.2.2-1-x86_64.pkg.tar.xz'"
          c:\msys64\usr\bin\pacman --noconfirm --disable-download-timeout -Sydd pacman || cmd /c "exit  /b 0"
          c:\msys64\usr\bin\pacman --noconfirm --disable-download-timeout -Sy || cmd /c "exit  /b 0"
          c:\msys64\usr\bin\pacman --noconfirm --disable-download-timeout -Syuu || cmd /c "exit  /b 0"
          C:\msys64\usr\bin\bash -lc "ls /var/lib/pacman/sync" || cmd /c "exit  /b 0"
          dir "c:\msys64\etc\pacman.d" || cmd /c "exit  /b 0"
          

          REM *** Install dependencies ***
          c:\msys64\usr\bin\pacman --noconfirm --disable-download-timeout -S -s libarchive || cmd /c "exit  /b 0"
          c:\msys64\usr\bin\pacman --noconfirm --disable-download-timeout -S -q %MSYS_REPO%-libarchive || cmd /c "exit  /b 0"
          REM C:\msys64\usr\bin\bash -lc "pacman --noconfirm -U 'http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-libsndfile-1.0.29-2-any.pkg.tar.zst'"
          c:\msys64\usr\bin\pacman --noconfirm --disable-download-timeout -S -q %MSYS_REPO%-cppunit || cmd /c "exit  /b 0"
          c:\msys64\usr\bin\pacman --noconfirm -S -q %MSYS_REPO%-portaudio || cmd /c "exit  /b 0"
          c:\msys64\usr\bin\pacman --noconfirm -S -q %MSYS_REPO%-portmidi || cmd /c "exit  /b 0"
          c:\msys64\usr\bin\pacman --noconfirm -S -q %MSYS_REPO%-libwinpthread-git || cmd /c "exit  /b 0"
          c:\msys64\usr\bin\pacman --noconfirm -S -q %MSYS_REPO%-ladspa-sdk || cmd /c "exit  /b 0"

          REM *** INIT SUBMODULES ***
          git submodule init
          git submodule update

          REM *** Configure build ***
          rename "C:\Program Files\Git\usr\bin\sh.exe" "sh2.exe"
          mkdir build
          cd build
          cmake -G "%GENERATOR%" -DCMAKE_PREFIX_PATH=%CMAKE_PREFIX_PATH% -DCMAKE_BUILD_TYPE=%BUILD_TYPE% %CMAKE_FLAGS% -DJACK_INCLUDE_DIRS="c:/%PROGRAM_FILES%/JACK2/include" -DJACK_LIBRARIES="c:/%PROGRAM_FILES%/JACK2/lib/%LIBJACK%.a" -DLIBSNDFILE_INCLUDE_DIRS="%LIBSNDPATH%/include" -DLIBSNDFILE_LIBRARIES="%LIBSNDPATH%/bin/sndfile.dll" ..

    build_script:
      - cmd: |-
          if not %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH% if %job_name%==Windows32 exit

          REM *** Build ***
          set VERBOSE=1
          cmake --build . -j %NUMBER_OF_PROCESSORS%

          REM *** Run tests and report results ***
          set H2_HOME=%APPVEYOR_BUILD_FOLDER%
          echo %H2_HOME%
          SET CORE_PATH=%cd%\src\core
          echo %CORE_PATH%
          set PATH=%CORE_PATH%;%PATH%
          src\tests\tests.exe --appveyor || cmd /c "exit /b 0"
          7z a %APPVEYOR_BUILD_FOLDER%\testresults.zip %TEMP%\hydrogen || cmd /c "exit  /b 0"
          if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH% appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\testresults.zip

          mkdir %APPVEYOR_BUILD_FOLDER%\build\windows\extralibs

          REM *** Deploy Qt ***
          %QTDIR%\bin\windeployqt.exe -xmlpatterns --no-patchqt --dir %APPVEYOR_BUILD_FOLDER%\build\windows\extralibs src/gui/hydrogen.exe

          REM *** Deploy other libraries ***
          set PYTHON=C:\Python38\python
          %PYTHON% -m pip install -r %APPVEYOR_BUILD_FOLDER%\windows\ci\requirements.txt
          %PYTHON% %APPVEYOR_BUILD_FOLDER%\windows\ci\copy_thirdparty_dlls.py --no-overwrite -V info -L %MSYS%\bin -d %APPVEYOR_BUILD_FOLDER%\build\windows\extralibs src/gui/hydrogen.exe src/core/libhydrogen-core-1.1.1.dll

          REM Chocolatey installs JACK dlls in c:\Windows, so
          REM copy_third_party_libs.py thinks it's a system lib and
          REM won't copy it.
          copy c:\Windows\%LIBJACK% %APPVEYOR_BUILD_FOLDER%\build\windows\extralibs

          REM *** Build installer ***
          cpack -G NSIS -v

          REM *** Run and verify installer ***
          set INSTDIR=C:\hydrogen
          mkdir %INSTDIR%
          FOR %%F IN (Hydrogen-*.exe) DO %%F /S /D=%INSTDIR%
          %PYTHON% -m pytest %APPVEYOR_BUILD_FOLDER%\windows\ci\test_installation.py --junitxml=test_installation.xml

on_finish:
  - cmd: if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH%  appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\build\CMakeCache.txt
  - cmd: if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH%  appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\build\CMakeFiles\CMakeOutput.log
  - cmd: if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH%  appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\build\CMakeFiles\CMakeError.log
  - cmd: if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH%  appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\build\Hydrogen-1.1.1-win64.exe || cmd /c "exit /b 0"
  - cmd: if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH%  appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\build\Hydrogen-1.1.1-win32.exe || cmd /c "exit /b 0"


  - cmd: |
      if %APPVEYOR_REPO_BRANCH%==%ARTIFACT_BRANCH% curl -F file=@%APPVEYOR_BUILD_FOLDER%\build\test_installation.xml https://ci.appveyor.com/api/testresults/junit/%APPVEYOR_JOB_ID%
